
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behavior includes needed */
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

#include <locale/keys_es.h>

/* Automatically generated layer name #define */
#define LAYER_Base 0
#define LAYER_Cursor 1
#define LAYER_Number 2
#define LAYER_Function 3
#define LAYER_Symbol 4
#define LAYER_Lower 5
#define LAYER_Magic 6

/* Default glove80 system configuration, including key-positions */
#include "includes/glove80/system.dtsi"

/* Custom macros */
/ {
    macros {
        // TODO: CREATE GENERIC MACRO TO MAKE UNDEAD SPANISH SYMBOLS
        // ` (undead)
        ZMK_MACRO(es_grave_undead,
            wait-ms = <1>;
            tap-ms = <1>;
            bindings = <&kp ES_GRAVE &kp SPACE>;
        )
        // ~ (undead)
        ZMK_MACRO(es_tilde_undead,
            wait-ms = <1>;
            tap-ms = <1>;
            bindings = <&kp ES_TILDE &kp SPACE>;
        )
        // ^ (undead)
        ZMK_MACRO(es_caret_undead,
            wait-ms = <1>;
            tap-ms = <1>;
            bindings = <&kp ES_CARET &kp SPACE>;
        )

        // FUNCTIONAL SWITCHES
        // GLORIOUR ENGRAMMER
        // Mod+Tab application switcher - hold this down to keep menu open
        mod_tab: mod_tab_switcher {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings
                = <&macro_param_1to1>
                , <&macro_press &kp MACRO_PLACEHOLDER>
                , <&macro_tap &kp TAB>
                , <&macro_pause_for_release>
                , <&macro_param_1to1>
                , <&macro_release &kp MACRO_PLACEHOLDER>
                ;
        };
        mod_tab_chord: mod_tab_switcher_chord {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings
                = <&macro_param_2to1>
                , <&macro_press &mo MACRO_PLACEHOLDER>
                , <&macro_param_1to1>
                , <&macro_press &mod_tab MACRO_PLACEHOLDER>
                , <&macro_pause_for_release>
                , <&macro_param_1to1>
                , <&macro_release &mod_tab MACRO_PLACEHOLDER>
                , <&macro_param_2to1>
                , <&macro_release &mo MACRO_PLACEHOLDER>
                ;
        };
        // SELECTION MACROS - Glorious Engrammer
        // TODO: extract to includes/ge38/select_macros.dtsi (might require some configuration for delays)
        // TODO: also should be node-free
        // select_none
        ZMK_MACRO(select_none,
            wait-ms = <1>;
            tap-ms = <1>;
            bindings = <&kp DOWN &kp UP &kp RIGHT &kp LEFT>;
        )
        // TODO: add more select macros
    };
};

/* Custom behavior */
// TODO: extract to includes/tailorkey/hrm.dtsi (might require some configuration for timings as on Sunaku's keymap)
/ {
    behaviors {

        // Homerow Mod for the left index finger - TailorKey
        HRM_left_index: HRM_left_index {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <170>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <100>;
            hold-trigger-key-positions = <57 56 55 72 73 74 5 6 7 8 16 17 18 19 20 28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 9 21 33 45 63 79 52 53 54 70 71 69>;
            hold-trigger-on-release;
        };

        // Homerow Mod for the left middle finger - TailorKey
        HRM_left_middy: HRM_left_middy {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <210>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <57 56 55 72 73 74 5 6 7 8 16 17 18 19 20 28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 9 21 33 45 63 79 52 53 54 69 70 71>;
            hold-trigger-on-release;
        };

        // Homerow Mod for the left pinky - TailorKey
        HRM_left_pinky: HRM_left_pinky {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <260>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <57 56 55 72 73 74 5 6 7 8 9 16 17 18 19 20 21 29 30 31 32 33 42 43 44 45 60 61 62 63 28 40 41 58 59 75 76 77 79 78 52 53 54 69 70 71>;
            hold-trigger-on-release;
        };

        // Homerow Mod for the left ring finger 1 - TailorKey
        HRM_left_ring1: HRM_left_ring1 {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <240>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <57 56 55 72 73 74 5 6 7 8 16 17 18 19 20 28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 9 21 33 45 63 79 52 53 54 69 70 71>;
            hold-trigger-on-release;
        };

        // Homerow Mod for the left ring finger 2 - TailorKey
        HRM_left_ring2: HRM_left_ring2 {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <240>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <57 56 55 72 73 74 5 6 7 8 16 17 18 19 20 28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 9 21 33 45 63 79 53 54 69 70 71 52>;
            hold-trigger-on-release;
        };

        // Homerow Mod for the right index finger - TailorKey
        HRM_right_index: HRM_right_index {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <170>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <100>;
            hold-trigger-key-positions = <52 53 54 71 70 69 0 1 10 11 12 13 14 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 64 65 66 67 68 15 4 2 3 55 56 57 72 73 74>;
            hold-trigger-on-release;
        };

        // Homerow Mod for the right middle finger - TailorKey
        HRM_right_middy: HRM_right_middy {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <210>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <52 53 54 71 70 69 0 1 10 11 12 13 14 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 64 65 66 67 68 15 4 2 3 55 56 57 72 73 74>;
            hold-trigger-on-release;
        };

        // Homerow Mod for the right pinky - TailorKey
        HRM_right_pinky: HRM_right_pinky {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <260>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <52 53 54 71 70 69 0 1 10 11 12 13 14 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 64 65 66 67 68 15 4 2 3 55 56 57 72 73 74>;
            hold-trigger-on-release;
        };

        // Homerow Mod for the right ring 1 - TailorKey
        HRM_right_ring1: HRM_right_ring1 {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <240>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <52 53 54 71 70 69 0 1 10 11 12 13 14 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 64 65 66 67 68 15 4 2 3 55 56 57 72 73 74>;
            hold-trigger-on-release;
        };

        // Homerow Mod for the right ring 2 - TailorKey
        HRM_right_ring2: HRM_right_ring2 {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <240>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <52 53 54 71 70 69 0 1 10 11 12 13 14 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 64 65 66 67 68 15 4 2 3 55 56 57 72 73 74>;
            hold-trigger-on-release;
        };
        // thumb_layer_access - Glorious Engrammer
        thumb: thumb_layer_access {
            compatible = "zmk,behavior-hold-tap";
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <300>; // enable repeat
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;
        };
    };
};

/* Custom combos */
// TODO: extract to includes/ge38/combos.dtsi (might require some configuration for which layer to set it in)
/ {
    combos {
        compatible = "zmk,combos";

        // Glorious Engrammer - tab switchers
        // TODO: add to other layers that are not only the cursor one
        combo_alt_tab_switcher {
            timeout-ms = <50>;
            key-positions = <POS_LH_T4 POS_LH_T1>;
            bindings = <&mod_tab_chord LALT LAYER_Cursor>;
            layers = <LAYER_Base>;
        };
        combo_ctrl_tab_switcher {
            timeout-ms = <50>;
            key-positions = <POS_LH_T4 POS_LH_T5>;
            bindings = <&mod_tab_chord LCTRL LAYER_Cursor>;
            layers = <LAYER_Base>;
        };
        // Glorious Engrammer - hyper & meh (sticky)
        combo_sticky_hyper_right {
            timeout-ms = <50>;
            key-positions = <POS_RH_T1 POS_RH_T4>;
            bindings = <&sk LG(LA(LC(LSHFT)))>;
            layers = <LAYER_Base>;
        };
        combo_sticky_meh_right {
            timeout-ms = <50>;
            key-positions = <POS_RH_T4 POS_RH_T5>;
            bindings = <&sk LA(LC(LSHFT))>;
            layers = <LAYER_Base>;
        };
    };
};

/* Include helpers here
   NOTE: all usages of ZMK_ functions are overriden from this point on,
   so only include modules/functions working with them
*/
#include <zmk-helpers/helper.h>

// TODO: refactor keymap to use zmk-helper GLOVE80 layout function
/* Keymap */
/ {
    keymap {
        compatible = "zmk,keymap";


        layer_Base {
            bindings = <
                &kp F1                &kp F2                     &kp F3                     &kp F4                      &kp F5                                                                                                                                                               &kp F6                       &kp F7                       &kp F8                      &kp F9                            &kp F10
                &kp ES_IEXCL          &kp ES_N1                  &kp ES_N2                  &kp ES_N3                   &kp ES_N4                   &kp ES_N5                                                                                                                     &kp ES_N6  &kp ES_N7                    &kp ES_N8                    &kp ES_N9                   &kp ES_N0                         &kp ES_SQT
                &kp ES_ORDM           &kp ES_Q                   &HRM_left_ring2 RALT ES_W  &kp ES_E                    &kp ES_R                    &kp ES_T                                                                                                                      &kp ES_Y   &kp ES_U                     &kp ES_I                     &HRM_right_ring2 RALT ES_O  &kp ES_P                          &kp ES_C_CEDILLA
                &caps_word            &HRM_left_pinky LGUI ES_A  &HRM_left_ring1 LALT ES_S  &HRM_left_middy LSHFT ES_D  &HRM_left_index LCTRL ES_F  &kp ES_G                                                                                                                      &kp ES_H   &HRM_right_index RCTRL ES_J  &HRM_right_middy RSHFT ES_K  &HRM_right_ring1 LALT ES_L  &HRM_right_pinky RGUI ES_N_TILDE  &kp ES_ACUTE
                &sk LSHFT             &kp ES_Z                   &kp ES_X                   &kp ES_C                    &kp ES_V                    &kp ES_B    &thumb LAYER_Function ESC  &kp UP                   &kp DOWN    &kp LEFT  &kp RIGHT  &kp RET                      &kp ES_N   &kp ES_M                     &kp ES_COMMA                 &kp ES_DOT                  &kp ES_MINUS                      &sk RSHFT
                &magic LAYER_Magic 0  &kp LCTRL                  &kp LALT                   &kp LGUI                    &kp ES_LT                               &thumb LAYER_Cursor BSPC   &thumb LAYER_Number DEL  &lower      &lower    &kp TAB    &thumb LAYER_Symbol SPACE               &kp ES_GRAVE                 &kp ES_PLUS                  &kp RALT                    &kp RCTRL                         &magic LAYER_Magic 0
            >;
        };

        layer_Cursor {
            bindings = <
                &none         &none             &none         &none         &none                                                                                                                        &none         &none             &none         &none         &none
                &kp ESC       &kp RET           &kp SPACE     &kp TAB       &kp DEL       &kp INS                                                                                          &kp INS       &kp DEL       &kp TAB           &kp SPACE     &kp RET       &kp ESC
                &kp LC(ES_E)  &sk LSHFT         &kp LC(ES_Y)  &kp LC(ES_Z)  &kp BSPC      &kp LC(ES_X)                                                                                     &kp LC(ES_X)  &kp BSPC      &kp LC(ES_Z)      &kp LC(ES_Y)  &sk RSHFT     &kp LC(ES_E)
                &kp LC(ES_L)  &kp LGUI          &kp LALT      &kp LSHFT     &kp LCTRL     &kp LC(ES_C)                                                                                     &kp LC(ES_C)  &kp LEFT      &kp UP            &kp DOWN      &kp RIGHT     &kp LC(ES_L)
                &kp LC(ES_J)  &kp LC(ES_A)      &none         &none         &kp LC(ES_F)  &kp LC(ES_V)    &mod_tab LALT  &mod_tab LGUI   &kp TAB            &select_none  &none  &none     &kp LC(ES_V)  &kp HOME      &kp PG_UP         &kp PG_DN     &kp END       &kp LC(ES_J)
                &kp LC(ES_H)  &kp LC(LS(ES_G))  &none         &none         &kp LC(ES_G)                  &none          &mod_tab LCTRL  &tog LAYER_Cursor  &kp LC(ES_A)  &none  &none                   &kp LC(ES_F)  &kp LC(LS(ES_G))  &kp LC(ES_G)  &kp LC(ES_H)  &kp LG(ES_DOT)
            >;
        };

        layer_Number {
            bindings = <
                &none       &none         &none         &none         &none                                                                                                                 &none             &none        &none          &none         &none
                &kp ESC     &kp RET       &kp SPACE     &kp TAB       &kp DEL       &kp INS                                                                               &es_tilde_undead  &es_caret_undead  &kp ES_HASH  &kp ES_DOLLAR  &kp ES_EXCL   &none
                &none       &sk LSHFT     &kp LC(ES_Y)  &kp LC(ES_Z)  &kp BSPC      &none                                                                                 &kp ES_PERCENT    &kp ES_N7         &kp ES_N8    &kp ES_N9      &kp ES_COLON  &none
                &kp KP_NUM  &kp LGUI      &kp LALT      &kp LSHFT     &kp LCTRL     &none                                                                                 &kp KP_PLUS       &kp ES_N4         &kp ES_N5    &kp ES_N6      &kp KP_MINUS  &none
                &none       &kp LC(ES_A)  &none         &none         &kp LC(ES_F)  &none    &none  &none  &none                &kp ES_LT     &kp ES_GT   &kp KP_EQUAL    &kp KP_MULTIPLY   &kp ES_N1         &kp ES_N2    &kp ES_N3      &kp KP_SLASH  &none
                &none       &none         &none         &none         &none                  &none  &none  &tog LAYER_Number    &kp KP_COMMA  &kp KP_DOT  &kp ES_N0                         &none             &none        &none          &none         &kp ES_AT
            >;
        };

        layer_Function {
            bindings = <
                &none      &none         &none         &none         &none                                                                                                                &none          &none         &none         &none          &none
                &kp ESC    &kp RET       &kp SPACE     &kp TAB       &kp DEL    &kp INS                                                                                 &kp C_MEDIA_HOME  &kp C_PLAY     &kp C_PREV    &kp C_NEXT    &kp C_STOP     &kp C_EJECT
                &none      &sk LSHFT     &kp LC(ES_Y)  &kp LC(ES_Z)  &kp BSPC   &none                                                                                   &kp K_CALC        &kp F7         &kp F8        &kp F9        &kp F10        &kp F13
                &kp CAPS   &kp LGUI      &kp LALT      &kp LSHFT     &kp LCTRL  &none                                                                                   &kp K_WWW         &kp F4         &kp F5        &kp F6        &kp F11        &kp F14
                &none      &kp LC(ES_A)  &none         &none         &none      &none    &none  &none  &none                  &kp C_PREV  &kp C_NEXT    &kp C_PP        &kp C_AL_FILES    &kp F1         &kp F2        &kp F3        &kp F12        &kp F15
                &none      &none         &none         &none         &none               &none  &none  &tog LAYER_Function    &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP                      &kp C_BRI_MAX  &kp C_BRI_UP  &kp C_BRI_DN  &kp C_BRI_MIN  &kp C_BRI_AUTO
            >;
        };

        layer_Symbol {
            bindings = <
                &none             &none              &none                    &none                     &none                                                                                                                       &none      &none        &none      &none     &none
                &none             &es_grave_undead   &kp ES_LEFT_PARENTHESIS  &kp ES_RIGHT_PARENTHESIS  &kp ES_SEMI         &kp ES_COMMA                                                                                     &none  &none      &none        &none      &none     &none
                &kp ES_EXCL       &kp ES_LEFT_BRACE  &kp ES_SQT               &kp ES_DQT                &kp ES_RIGHT_BRACE  &kp ES_QMARK                                                                                     &none  &kp LCTRL  &kp LSHFT    &kp LALT   &kp LGUI  &none
                &kp ES_HASH       &es_caret_undead   &kp ES_EQUAL             &kp ES_UNDERSCORE         &kp ES_DOLLAR       &kp ES_STAR                                                                                      &none  &kp BSPC   &kp TAB      &kp SPACE  &kp RET   &none
                &es_tilde_undead  &kp ES_LT          &kp ES_PIPE              &kp ES_MINUS              &kp ES_GT           &kp ES_FSLH    &kp ES_BSLH     &kp ES_DOT    &kp ES_STAR     &none               &none  &none    &none  &kp DEL    &kp LS(TAB)  &none      &none     &none
                &kp ES_AT         &kp ES_AMPERSAND   &kp ES_LEFT_BRACKET      &kp ES_RIGHT_BRACKET      &kp ES_PLUS                        &kp ES_PERCENT  &kp ES_COLON  &kp ES_SEMI     &tog LAYER_Symbol   &none  &none           &none      &none        &none      &none     &none
            >;
        };

        layer_Lower {
            bindings = <
                &kp C_BRI_DN          &kp C_BRI_UP  &kp C_PREV      &kp C_NEXT      &kp C_PP                                                                                                                                      &kp C_MUTE    &kp C_VOL_DN  &kp C_VOL_UP  &none            &kp PAUSE_BREAK
                &kp ES_EQUAL          &none         &none           &none           &none            &kp HOME                                                                                           &kp ES_LEFT_PARENTHESIS   &kp KP_NUM    &kp KP_EQUAL  &kp KP_SLASH  &kp KP_MULTIPLY  &kp PRINTSCREEN
                &kp TAB               &none         &none           &kp UP_ARROW    &none            &kp END                                                                                            &kp ES_RIGHT_PARENTHESIS  &kp KP_N7     &kp KP_N8     &kp KP_N9     &kp KP_MINUS     &kp SCROLLLOCK
                &kp ESC               &none         &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp PG_UP                                                                                          &kp ES_PERCENT            &kp KP_N4     &kp KP_N5     &kp KP_N6     &kp KP_PLUS      &none
                &es_grave_undead      &kp K_APP     &none           &kp F11         &kp F12          &kp PG_DN    &tog LAYER_Function  &none              &to 0    &none  &none  &none                  &kp ES_COMMA              &kp KP_N1     &kp KP_N2     &kp KP_N3     &kp KP_ENTER     &kp PAGE_UP
                &magic LAYER_Magic 0  &kp CAPS      &kp INS         &kp F11         &kp F12                       &tog LAYER_Cursor    &tog LAYER_Number  &none    &none  &none  &tog LAYER_Symbol                                &kp KP_N0     &kp KP_N0     &kp KP_DOT    &kp KP_ENTER     &kp PAGE_DOWN
            >;
        };

        layer_Magic {
            bindings = <
                &bt BT_CLR   &none            &none            &none            &none                                                                                             &none  &none  &none  &none  &bt BT_CLR_ALL
                &to 0        &to 1            &to 2            &to 3            &to 4            &to 5                                                                     &to 6  &none  &none  &none  &none  &none
                &none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                           &none  &none  &none  &none  &none  &none
                &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                           &none  &none  &none  &none  &none  &bootloader
                &sys_reset   &none            &none            &none            &none            &none              &bt_2  &bt_3  &none           &none  &none   &none     &none  &none  &none  &none  &none  &sys_reset
                &none        &none            &none            &none            &none                               &bt_0  &bt_1  &out OUT_USB    &none  &none   &none            &none  &none  &none  &none  &none
            >;
        };

    };
};
